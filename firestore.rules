
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =============================================
    // Helper Functions
    // =============================================
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return request.auth.uid == userId;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function getRole() {
      return getUserData().role;
    }
    
    function getPermissions() {
        return get(/databases/$(database)/documents/permissions/$(getRole())).data;
    }

    function isMemberOf(projectId) {
        return isSignedIn() && (
            projectId in getUserData().joinedProjects ||
            get(/databases/$(database)/documents/projects/$(projectId)).data.leadId == request.auth.uid
        );
    }
    
    function isProjectLead(project) {
        return isSignedIn() && project.leadId == request.auth.uid;
    }

    // =============================================
    // Collections
    // =============================================

    match /users/{userId} {
      // Allow any signed-in user to read any other user's profile
      // This is generally safe for non-sensitive public profile info like name/role
      allow read: if isSignedIn();

      // Users can only update their own profile
      // Admin can update anyone's role
      allow update: if isSignedIn() && 
                    (isUser(userId) || getPermissions().canManageUsers);
                    
      allow create: if isSignedIn();
    }

    match /permissions/{role} {
      // Permissions are read-only from the client. They should be managed via the seed script or console.
      // Any authenticated user can read permissions to allow the client-side logic to adapt.
      allow read: if isSignedIn();
      allow write: if false; // Disallow all writes from client
    }
    
    match /system/{docId} {
        // Only users with key-holding permissions can read/write system status
        allow read: if isSignedIn();
        allow write: if isSignedIn() && getPermissions().canHoldKey == true;
    }

    match /projects/{projectId} {
      // Allow any authenticated user to list/read projects for general browsing.
      // Details are still protected by other rules if needed.
      allow list, get: if isSignedIn();

      // Only users with permission can create projects
      allow create: if isSignedIn() && getPermissions().canCreateProjects == true;

      // Allow project lead or admins to update projects
      allow update: if isSignedIn() && 
                     (isMemberOf(projectId) || getPermissions().canApproveProjects == true);

      // Only admins should be able to delete projects
      allow delete: if isSignedIn() && getPermissions().canApproveProjects == true;
      
      match /updates/{updateId} {
        allow read, list: if isSignedIn() && isMemberOf(projectId);
        allow create: if isSignedIn() && isMemberOf(projectId);
      }
    }

    match /inventory_items/{itemId} {
      // All authenticated users can see inventory
      allow read, list: if isSignedIn();
      
      // Only admins/inventory managers can create, update, or delete items
      allow write: if isSignedIn() && getPermissions().canManageInventoryStock == true;
    }

    match /inventory_requests/{requestId} {
      // Any authenticated user can request inventory.
      allow create: if isSignedIn();

      // Users can see their own requests.
      // Inventory managers can see all requests.
      allow read, list: if isSignedIn();
      
      // Only inventory managers/admins can update requests (approve, reject, etc.)
      allow update: if isSignedIn() && getPermissions().canApproveInventory == true;
    }
    
    match /procurement_buckets/{bucketId} {
        allow create, update, get, list, delete: if isSignedIn();
    }
    
    match /new_item_requests/{requestId} {
         allow create, update, get, list, delete: if isSignedIn();
    }

    match /reimbursements/{reimbursementId} {
        allow create, update, get, list, delete: if isSignedIn();
    }
    
    // Loosen rules for financial collections to allow dashboard summaries and reports
    match /accounts/{accountId} {
        allow read, list: if isSignedIn();
        allow write: if isSignedIn() && getPermissions().canViewFinanceSummary == true;
    }
    
    match /transactions/{transactionId} {
        allow read, list: if isSignedIn();
        allow write: if isSignedIn() && getPermissions().canViewFinanceSummary == true;
    }
    
    match /budgets/{budgetId} {
        allow read, list: if isSignedIn();
        allow write: if isSignedIn() && getPermissions().canViewFinanceSummary == true;
    }
    
    match /logbook/{logId} {
      allow read, list: if isSignedIn();
      allow write: if isSignedIn() && getPermissions().canViewFinanceSummary == true;
    }

  }
}
