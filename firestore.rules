
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get the current user's role and permissions
    function getUserPermissions(userId) {
      let userRole = get(/databases/$(database)/documents/users/$(userId)).data.role;
      return get(/databases/$(database)/documents/permissions/$(userRole)).data;
    }

    // Helper function to check if a user is a member of a project
    function isProjectMember(projectId, userId) {
      return userId in get(/databases/$(database)/documents/projects/$(projectId)).data.memberIds;
    }

    // Users can read their own profile, admins can read any profile.
    // Users can only update their own name. Admins/Coordinators can update roles.
    match /users/{userId} {
      allow read: if request.auth.uid == userId
                   || getUserPermissions(request.auth.uid).canViewAllUsers == true;
      
      // Allow creation when a user registers
      allow create: if request.auth.uid == userId;

      allow update: if request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'displayName', 'photoURL'])
                    || getUserPermissions(request.auth.uid).canManageUsers == true;
    }

    // Permissions can only be read by authenticated users to check their own permissions,
    // and can only be written by admins.
    match /permissions/{role} {
      allow read: if request.auth != null;
      allow write: if getUserPermissions(request.auth.uid).canAccessAdminPanel == true;
    }
    
    // Projects can be created by any authenticated user.
    // They can be read by any member of that project.
    // They can only be updated by members or those with approval permissions.
    match /projects/{projectId} {
      allow read: if request.auth != null && (isProjectMember(projectId, request.auth.uid) || getUserPermissions(request.auth.uid).canViewAllProjects == true);
      allow create: if request.auth != null;
      allow update: if request.auth != null && (isProjectMember(projectId, request.auth.uid) || getUserPermissions(request.auth.uid).canApproveProjects == true);

      // Project updates can be posted by members.
      match /updates/{updateId} {
        allow read: if request.auth != null && (isProjectMember(projectId, request.auth.uid) || getUserPermissions(request.auth.uid).canViewAllProjects == true);
        allow create: if request.auth != null && isProjectMember(projectId, request.auth.uid);
      }
    }
    
    // Inventory items can be read by any authenticated user.
    // Only inventory managers can create, update, or delete them.
    match /inventory_items/{itemId} {
      allow read: if request.auth != null;
      allow create, update, delete: if getUserPermissions(request.auth.uid).canManageInventoryStock == true;
    }

    // Inventory requests can be created by any authenticated user.
    // They can be read by the requester or an inventory manager.
    // They can only be updated (approved/rejected) by an inventory manager.
    match /inventory_requests/{requestId} {
      allow read: if request.auth != null && (resource.data.requestedById == request.auth.uid || getUserPermissions(request.auth.uid).canApproveInventory == true);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.requestedById;
      allow update: if request.auth != null && getUserPermissions(request.auth.uid).canApproveInventory == true;
    }

    // Procurement rules
    match /new_item_requests/{requestId} {
      allow read: if request.auth != null; // Allow any authenticated user to read
      allow create: if request.auth != null && request.auth.uid == request.resource.data.requestedById;
      allow update: if getUserPermissions(request.auth.uid).canApproveNewItemRequest == true;
    }

    match /procurement_buckets/{bucketId} {
        allow read: if request.auth != null && (request.auth.uid in resource.data.members);
        allow create: if request.auth != null && getUserPermissions(request.auth.uid).canCreateBuckets == true;
        allow update: if request.auth != null && (
            (request.auth.uid in resource.data.members) || // Members can add items (update members array)
            getUserPermissions(request.auth.uid).canApproveNewItemRequest == true // Admins/managers can update status
        );
    }
    
    // Reimbursements can be created by any authenticated user.
    // They can be read by the submitter or an admin/treasurer.
    // They can only be updated by those with approval permissions.
    match /reimbursements/{reimbursementId} {
      allow read: if request.auth != null && (resource.data.submittedById == request.auth.uid || getUserPermissions(request.auth.uid).canApproveReimbursements == true);
      allow create: if request.auth != null && request.auth.uid == request.resource.data.submittedById;
      allow update: if getUserPermissions(request.auth.uid).canApproveReimbursements == true;
    }

    // Finance data (accounts, transactions, budgets) can only be accessed by treasurers/admins.
    match /accounts/{accountId} {
        allow read: if getUserPermissions(request.auth.uid).canViewFinanceSummary == true;
        allow write: if getUserPermissions(request.auth.uid).canViewFinanceSummary == true; // Simplified for this example
    }
    
    match /transactions/{transactionId} {
        allow read: if getUserPermissions(request.auth.uid).canViewFinanceSummary == true;
        allow write: if getUserPermissions(request.auth.uid).canViewFinanceSummary == true;
    }

    match /budgets/{budgetId} {
        allow read: if getUserPermissions(request.auth.uid).canViewFinanceSummary == true;
        allow write: if getUserPermissions(request.auth.uid).canViewFinanceSummary == true;
    }

    // System status can be read by any authenticated user, but only updated by users with key-holding permissions.
    match /system/{docId} {
        allow read: if request.auth != null;
        allow write: if getUserPermissions(request.auth.uid).canHoldKey == true;
    }
    
  }
}
